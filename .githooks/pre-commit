#!/usr/bin/env bash

# Fail on first line that fails.
set -e

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Use git diff-index to check for whitespace errors
if ! git diff-index --check --cached $against -- ':!*.js.snap' .
then
    echo "Aborting commit due to whitespace errors."
    exit 1
fi

# Only keep staged files that are added (A), copied (C) or modified (M).
STAGED=$(git --no-pager diff --name-only --cached --diff-filter=ACM)
# Files which are only partly staged (eg. git add --patch).
PATCH_STAGED=$(git --no-pager diff --name-only --diff-filter=ACM $STAGED)
# Files which are fully staged.
FULLY_STAGED=$(comm -23 <(echo "$STAGED") <(echo "$PATCH_STAGED"))

JS_STAGED=$(grep .js$ <<< "$STAGED" || true)
JS_FULLY_STAGED=$(grep .js$ <<< "$FULLY_STAGED" || true)
CSS_STAGED=$(grep .css$ <<< "$STAGED" || true)
CSS_FULLY_STAGED=$(grep .css$ <<< "$FULLY_STAGED" || true)
MD_STAGED=$(grep .md$ <<< "$STAGED" || true)
MD_FULLY_STAGED=$(grep .md$ <<< "$FULLY_STAGED" || true)
SNAPSHOT_STAGED=$(grep .snap$ <<< "$STAGED" || true)


if [ -n "$JS_FULLY_STAGED" ];
then
    # Format and re-stage fully staged files only.
    npm run formatter -s -- $JS_FULLY_STAGED
    git add $JS_FULLY_STAGED
fi

if [ -n "$CSS_FULLY_STAGED" ];
then
    npm run formatter -s -- $CSS_FULLY_STAGED
    git add $CSS_FULLY_STAGED
fi

if [ -n "$CSS_STAGED" ];
then
    npm run linter:css -s -- $CSS_STAGED
fi

if [ -n "$MD_FULLY_STAGED" ];
then
    npm run formatter -s -- $MD_FULLY_STAGED
    git add $MD_FULLY_STAGED
fi

if [ -n "$MD_STAGED" ];
then
    npm run linter:md -s -- $MD_STAGED
fi

if [ -n "$JS_STAGED" ] || [ -n "$SNAPSHOT_STAGED" ];
then
    npm run flow -s
    npm run test:coverage -s
fi
